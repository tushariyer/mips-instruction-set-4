#MIPS Project 4, Created by Tushar Iyer
#CS 211, Fall 2015
#Submitted on 11/18/2015  

	.data
	.align 0
killChar:
	.float -1
list:
	.space 40
nextLine:
	.asciiz "\n"
messageOne:
	.asciiz "Enter up to 10 floating point numbers, type -1.0 to end intake for less than 10 values"
messageTwo:
	.asciiz "Enter a float: "
messageThree:
	.asciiz "Floats which are greater or equal to the last value entered (The last value in this list is the last value entered):\n"

	.text
	.globl main

main:
	# Print first prompt
	la		$a0, messageOne				# Load string address of messageOne
	li		$v0, 4					# Syscall code - print string
	syscall
	
	la 		$t4, killChar	        		# $f31 = -1
	l.s 		$f31, ($t4) 
	
	addi 		$s4, $zero, 10				# $s4 = 10
	la  		$s1, list				# Load list into $s1
	j		intake 					# Jump to intake
	syscall

intake:
	la		$a0, nextLine				# Load nextLine string
	li		$v0, 4					# syscall - print string
	syscall
	
	beq 		$s3, $s4, done				# If counter = 10, jump to done
	la		$a0, messageTwo				# Load string address of messageTwo
	li		$v0, 4					# syscall - print string
	syscall

	li  		$v0, 6					# syscall - take in input floats
	syscall							

	c.eq.s  	$f0, $f31				# If input == $f31, jump to done
	bc1t		done					
	
	s.s   		$f0, ($s1)				# Store float in the current memory location in list location
	mov.s 		$f2, $f0				# Store float in $f2

	addi 		$s1, $s1, 4				# offset address by 4
	addi 		$s3, $s3, 1				# increment counter

	j 		intake					# Jump to intake

done:
	la		$a0, nextLine				# syscall - print string
	li		$v0, 4					
	syscall

	la		$a0, messageThree			# syscall - print string
	li		$v0, 4					
	syscall

	la  		$s1, list				# Load the address of list into $s1

loop:
	beq 		$s3, $zero, quit			# If we're at the end, quit
	l.s 		$f0, ($s1)				# Load the floating point into f0

	c.lt.s 		$f0, $f2				# Is $f0 < $f2?
	bc1f 		print 					# branch to print if false
	addi 		$s1, $s1, 4				# offset address by 4
	addi 		$s3, $s3, -1				# counter --

	j 		loop					# jump to loop

print:
	mov.s   	$f12, $f0				# Shift value to $f12
	li		$v0, 2					# syscall - print string
	syscall
	addi 		$s1, $s1, 4				# offset address by 4
	addi 		$s3, $s3, -1				# counter --
	la		$a0, nextLine				# syscall - print string
	li		$v0, 4					
	syscall

	j 		loop					# Jump to loop

quit:	
	li              $v0, 10         			# syscall - quit
        syscall